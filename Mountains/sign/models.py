
                        # Напишем форму, с помощью которой мы будем создавать нового пользователя.

from django.contrib.auth.forms import UserCreationForm                   # Для изменения стандартной модели пользователя
from django.contrib.auth.models import User                                # Импортируем стандартную модель пользователя
from django import forms

########################################################################################################################

class BaseRegisterForm(UserCreationForm):
    # Добавляем поля в форму
    email = forms.EmailField(label = "Email")
    name = forms.CharField(label = "Имя")
    surname = forms.CharField(label = "Фамилия")
    otchestvo = forms.CharField(label = "Отчество")
    phone = forms.CharField(label = "Номер телефона")

    class Meta:
        model = User
        fields = ("username",           # Поле по умолчанию
                  "name",
                  "surname",
                  "otchestvo",
                  "email",              # Поле по умолчанию
                  "phone",
                  "password1",          # Поле по умолчанию
                  "password2", )        # Поле по умолчанию

########################################################################################################################
#
# #ЭТО ВТОРОЙ ВАРИАНТ и НА МОЙ ВЗГЛЯД ПРАВИЛЬНЫЙ + создаём формы:
#                         # Можно использовать одну модель в разных приложениях следующим образом:
#
# from Point.models import Users
#
# ########################################################################################################################
#
# class UserProfile(Users):
#     # + Дополнительные поля для UserProfile, если это необходимо
#     class Meta:
#         proxy = True
#
#
# #   1. В этом примере, модель UserProfile наследуется от модели Users, что позволяет использовать все поля, определенные
# #в Users, и добавить дополнительные поля, если это необходимо. proxy = True говорит Django о том, что UsersTwo является
# #"прокси-моделью" и не требует создания новой таблицы в базе данных.
# #   2. Метод __str__() не обязательно переопределять, если он аналогичен методу в оригинальной модели Users
#
# ########################################################################################################################